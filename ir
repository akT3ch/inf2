//http://diskstation:30000/Mikrocontroller/AVRStudio_AVR-Basis-Uhr.git
//http://diskstation:30000/Mikrocontroller/Eclipse_AVR-Basis-Uhr.git

//include libs
#include <avr/io.h>
#include <util/delay.h>
#include <stdio.h>
#include <avr/interrupt.h>
//define
#ifndef F_CPU
#define F_CPU 8000000
#endif
// Pinbelegung für das LCD, an verwendete Pins anpassen
#define LCDDR_RS DDRA
#define LCDDR_E DDRD
#define LCDDR_D DDRC
#define LCDPORT_RS PORTA
#define LCDDPORT_E PORTD
#define LCDPORT_D PORTC
#define LCD_E PD6
#define LCD_RS PA2

#define SEKUNDE PB0
#define MINUTE PB1
#define STUNDE PB2
#define PLUS PD3
#define MINUS PD2

#define TRUE 1
#define FALSE 0

volatile uint8_t zaehler = 0;
uint8_t h = 10;
uint8_t m = 59;
uint8_t s = 55;

ISR(INT0_vect){// INT0 an PD2
    _delay_ms(15);         // Prellen der Taste abwarten (typisch 100us-10ms)
    if (PIND & (1 << PD2)) // Zustand nach dem Ende der Prellzeit testen
        zaehler++;         // Zähler +1
}
ISR(INT1_vect){// INT0 an PD3
    _delay_ms(15);         // Prellen der Taste abwarten (typisch 100us-10ms)
    if (PIND & (1 << PD3)) // Zustand nach dem Ende der Prellzeit testen
        zaehler--;         // Zähler -1
}

////////////////////////////////////////////////////////////////////////////////
// Erzeugt einen Enable-Puls
void enable(){
    LCDDPORT_E |= (1 << LCD_E); // Enable auf 1 setzen
    _delay_us(1);
    LCDDPORT_E &= ~(1 << LCD_E); // Enable auf 0 setzen
    _delay_us(4100);
}

////////////////////////////////////////////////////////////////////////////////
// 2 schritt übertragung von Attributwerten
void lcdCommand(uint8_t c){
    // c in zwei Schritten übertragen
    LCDPORT_RS &= ~(1 << LCD_RS); // RS-Bit löschen (Befehl!)
    LCDPORT_D &= 0x0F;            // High-Nibble löschen
    LCDPORT_D |= (c & 0xF0);      // High-Nibble von c setzen
    enable();                     // übertragen
    LCDPORT_D &= 0x0F;            // High-Nibble löschen
    LCDPORT_D |= (c << 4);        // Low-Nibble von c setzen
    enable();                     //uebertragen
}

////////////////////////////////////////////////////////////////////////////////
// Sendet den Befehl zur Löschung des Displays
void lcdClr(void){
    lcdCommand(0x01); // Befehl CLRHOME
}

////////////////////////////////////////////////////////////////////////////////
// Setzt den Cursor in Spalte x (0..15) Zeile y (1..4)
void lcdSetCursor(uint8_t x, uint8_t y){
    // Die Einträge hier sollten für ein LCD mit einer Zeilenlänge von 16 Zeichen passen
    uint8_t data;
    switch (y){
    case 1: // 1. Zeile
        data = 0x80 + 0x00 + x;
        break;
    case 2: // 2. Zeile
        data = 0x80 + 0x40 + x;
        break;
    case 3: // 3. Zeile
        data = 0x80 + 0x10 + x;
        break;
    case 4: // 4. Zeile
        data = 0x80 + 0x50 + x;
        break;
    default:
        return; // für den Fall einer falschen Zeile
    }

    lcdCommand(data);
}

////////////////////////////////////////////////////////////////////////////////
// c in zwei Schritten übertragen
void lcdData(uint8_t c){
    LCDPORT_RS |= (1 << LCD_RS); // RS-Bit auf 1 setzen
    LCDPORT_D &= 0x0F;           // High-Nibble löschen
    LCDPORT_D |= (c & 0xF0);     // High-Nibble von c setzen
    enable();                    // übertragen
    LCDPORT_D &= 0x0F;           // High-Nibble löschen
    LCDPORT_D |= (c << 4);       // Low-Nibble von c setzen
    enable();                    // übertragen
}

////////////////////////////////////////////////////////////////////////////////
// Schreibt einen String auf das LCD
void lcdString(const char *data){
    while (*data != '\0')
        lcdData(*data++);
}

////////////////////////////////////////////////////////////////////////////////
void lcdWert(uint32_t z){
    char s[16];
    snprintf(s, 16, "%ld", z);
    lcdString(s);
}

////////////////////////////////////////////////////////////////////////////////
void init(){                              // initial display-setup
    _delay_ms(15);             // Start-Wartezeit
    LCDDR_RS |= (1 << LCD_RS); // RS als Ausgang
    LCDDR_E |= (1 << LCD_E);   // E als Ausgang
    LCDDR_D |= 0b11110000;     // Bits 4-7 als Ausgang
    lcdCommand(0x33);          // Überträgt 3 - 3
    lcdCommand(0x32);          // Überträgt 3 - 2
    lcdCommand(0x28);          // Function Set, 2 Zeilen & 5x7
    lcdCommand(0x01);          // Clear Display
    lcdCommand(0x0c);          // Display an, kein Cursor
}

////////////////////////////////////////////////////////////////////////////////
void stellen(uint8_t s, uint8_t m, uint8_t h){
    uint8_t tmpS = s, tmpM = m, tmpH = h;

    if (SEKUNDE && PLUS){
        tmpS += zaehler;
        if (tmpS == 60){
            tmpS = 0;
            zaehler = 0;
            tmpM++;
        }
    } else if (MINUS){
        tmpS -= zaehler;
        if (tmpS == 0){
            tmpS = 06;
            zaehler = 0;
            tmpM--;
        }
    }

    if (MINUTE && PLUS){
        tmpM += zaehler;
        if (tmpM == 60){
            tmpH++;
            tmpM = 0;
            zaehler = 0;
        }
    } else if (MINUTE){
        tmpM -= zaehler;
        if (tmpM == 00){
            tmpH--;
            tmpM = 60;
            zaehler = 0;
        }
    }

    if (STUNDE && PLUS){
        if (tmpH == 24){
            tmpH = 0;
            zaehler = 0;
        } else tmpH += zaehler;
    } else if (STUNDE){
        tmpH -= zaehler;
        if (h == 0){
            tmpH = 0;
            zaehler = 0;
        }
    }

    char ch[12];
         lcdSetCursor(4, 2);
        sprintf(ch, "%02d:%02d:%02d", tmpH, tmpM, tempS);
        lcdString(ch);
        _delay_ms(500);
}

////////////////////////////////////////////////////////////////////////////////
//main function
int main(){
    DDRA = 0xff;
    DDRB = 0xff;
    MCUCR |= (1 << ISC00) | (1 << ISC01); // INT0 reagiert auf steigende Flanke
    MCUCR |= (1 << ISC11) | (1 << ISC10); // INT1 reagiert auf fallende Flanke
    GICR |= (1 << INT0) | (1 << INT1);    // INT0 und INT1 aktivieren
    sei();

    // Initialisierung des LCD
    init();

    char ch[12];
    while (1){
        lcdSetCursor(4, 1);
        if (s == 59){
            s = 0;
            m++;
        }
        if (m == 60){
            h++;
            m = 0;
        }
        if (h == 24)
            h = 0;
        s++;
        sprintf(ch, "%02d:%02d:%02d", h, m, s);
        lcdString(ch);
        _delay_ms(500);

        stellen(s, m, h);
    };

    return 0;
}
